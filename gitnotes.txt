---------------------------- ------------------ There is three stage in git Hub--------------------------------------------
...........................................................................................................................................
1.modified  = in the modified phase, if you want undo all change (git restore first.html)

2.staged = in the staged phase, if you want to undo all change  (git restore --staged first.html) after the undo it goes to again 

3.modified  =  in the modified phase (after the commit ), if you want to undo all change  so we have two option
             soft -This is useful when you want to "undo" the commits but keep the changes staged for a new commit (git reset --soft HEAD~1)
            hard-This is useful when you want to completely discard the changes in the working directory and start fresh with the state of the specified commit  (git reset --hard HEAD~1)



.........................................................Branches...............................................................
.check branch you are working-
        git branch
.create new branch -
        git branch branch_name
.switch to a branch -
        git checkout branch_name
.create and switch together -
        git checkout -b new_branch_name
.Delete branch -
        git branch -D branch_name (but if you want to Delete your branch in same branch , it is not possible you have to go onothe branch than possible) 
.Change brach Name- if you want to chage the brach name it is possible (git branch -m new_branch_name) 
.Push your code in own brach - git push -u origin your_branch_name 
.merge two brach - first you have to comeout to the branch with you merge , after that you have to  hit git merge brach_name(that you want to merge ) and if you want to see the change in github for that you have to push the code form your cmd
.merge_conflict - when you are in abc file form one branch you are doning commit and in same file form another branch you alredy did commit  , then you are going to merge on that time conflict issue is occur.   if you want to resolve , on that time you have to manually change and  add,commit and push..

Note point- change is availble for specified branch if you want to see same changes in otherbranch then you have to do merge   
            here one senrio , if you do change is in branch from that branch without save if you want to jump another brach then you are getting one error is {commit your change or stash them before you switch branches}       

 
 ------------------------------------------------------------stash--------------------------------------------------------------------
  stash - In Git, the "stash" is a convenient feature that allows you to temporarily save changes that are not ready to be committed but need to be set aside. This is useful when you want to switch to a different branch, but you have uncommitted changes in your working directory. The stash allows you to save these changes, switch branches, and then reapply the changes later. 
  for saving stash  the command is: git stash  and once you back to again in your branch and you want same data you have to 
  hit - git stash apply
  if you want to clear all stash - git stash clear

  .................................................remote............................................................................
  git remote -v : This will show you the names and URLs of the remote repositories associated with your local repository. It's a quick way to inspect the configuration and ensure that your repository is connected to the correct remotes
  this is for setting the remote: 
  git remote set-url origin https://new-repository-url.git
  this is for the adding the remote
  git remote add <remote-name> <remote-url>
  this is for removing the remote
  git remote remove <remote-name>


...................................................git pull....................................................
git pull is a Git command used to fetch and merge changes from a remote repository into the current branch. It is a combination of two separate Git commands (means in same branch two people is working and you want to take updated code of the branch , that time you have to git push)
git pull origin main :  This command fetches changes from the main branch of the remote repository named origin and merges them into your current local branch
Keep in mind that if there are local changes that haven't been committed, Git may attempt to merge remote changes into your local branch, potentially resulting in conflicts. It's a good practice to commit or stash your local changes before pulling to avoid conflicts

 

 ............................................git reset.....................................................................
 git reset --soft and HEAD are commands in Git that help manage commits and changes in your repository. Here's what each means:

1. git reset --soft
This command moves the HEAD pointer to a previous commit without changing the working directory or the staging area (index).
It essentially undoes commits but keeps the changes staged, so you can make new commits with these changes or modify them further.
It's useful if you want to adjust the commit history but keep the files as they are.
      git reset --soft HEAD~1

2.This moves the HEAD back by one commit, but the changes remain staged.

2. HEAD
HEAD is a reference to the current commit youâ€™re working on.
It represents the tip of the current branch you are on.
When you make a new commit, HEAD moves forward to point to the new commit.
Common examples involving HEAD:

HEAD~1 refers to the commit just before the current HEAD.
HEAD~2 refers to two commits before the current HEAD.
You can use HEAD in commands like git checkout, git reset, or git log to refer to specific commits relative to the current one.
